# Calculate format=diff pkg(sys-kernel/calculate-sources)=>4.18&&merge(x11-drivers/nvidia-drivers)=>387.34,388&&os_install_arch_machine==i686
diff --git a/kernel/nvidia-drm/nvidia-drm-connector.c b/kernel/nvidia-drm/nvidia-drm-connector.c
index b834021..46d1fe6 100644
--- a/kernel/nvidia-drm/nvidia-drm-connector.c
+++ b/kernel/nvidia-drm/nvidia-drm-connector.c
@@ -107,7 +107,7 @@ nvidia_connector_detect(struct drm_connector *connector, bool force)
             break;
         }
 
-        encoder = drm_encoder_find(dev, id);
+        encoder = drm_encoder_find(dev, NULL, id);
 
         if (encoder == NULL)
         {
diff --git a/kernel/nvidia-drm/nvidia-drm-crtc.c b/kernel/nvidia-drm/nvidia-drm-crtc.c
index 33af2c7..bf1fc53 100644
--- a/kernel/nvidia-drm/nvidia-drm-crtc.c
+++ b/kernel/nvidia-drm/nvidia-drm-crtc.c
@@ -434,7 +434,7 @@ int nvidia_drm_get_crtc_crc32(struct drm_device *dev,
         goto done;
     }
 
-    crtc = drm_crtc_find(dev, params->crtc_id);
+    crtc = drm_crtc_find(dev, NULL, params->crtc_id);
     if (!crtc) {
         NV_DRM_DEV_LOG_DEBUG(nv_dev, "Unknown CRTC ID %d\n", params->crtc_id);
         ret = -ENOENT;
diff --git a/kernel/nvidia-drm/nvidia-drm-drv.c b/kernel/nvidia-drm/nvidia-drm-drv.c
index e28151e..c122633 100644
--- a/kernel/nvidia-drm/nvidia-drm-drv.c
+++ b/kernel/nvidia-drm/nvidia-drm-drv.c
@@ -679,26 +679,26 @@ static const struct drm_ioctl_desc nv_drm_ioctls[] = {
 #if defined(NV_DRM_ATOMIC_MODESET_AVAILABLE)
     DRM_IOCTL_DEF_DRV(NVIDIA_GEM_IMPORT_NVKMS_MEMORY,
                       nvidia_drm_gem_import_nvkms_memory,
-                      DRM_CONTROL_ALLOW|DRM_UNLOCKED),
+                      DRM_UNLOCKED),
 #endif /* NV_DRM_ATOMIC_MODESET_AVAILABLE */
 
     DRM_IOCTL_DEF_DRV(NVIDIA_GEM_IMPORT_USERSPACE_MEMORY,
                       nvidia_drm_gem_import_userspace_memory,
-                      DRM_CONTROL_ALLOW|DRM_RENDER_ALLOW|DRM_UNLOCKED),
+                      DRM_RENDER_ALLOW|DRM_UNLOCKED),
     DRM_IOCTL_DEF_DRV(NVIDIA_GET_DEV_INFO,
                       nvidia_drm_get_dev_info,
-                      DRM_CONTROL_ALLOW|DRM_RENDER_ALLOW|DRM_UNLOCKED),
+                      DRM_RENDER_ALLOW|DRM_UNLOCKED),
 
 #if defined(NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ)
     DRM_IOCTL_DEF_DRV(NVIDIA_FENCE_SUPPORTED,
                       nvidia_drm_fence_supported,
-                      DRM_CONTROL_ALLOW|DRM_RENDER_ALLOW|DRM_UNLOCKED),
+                      DRM_RENDER_ALLOW|DRM_UNLOCKED),
     DRM_IOCTL_DEF_DRV(NVIDIA_FENCE_CONTEXT_CREATE,
                       nvidia_drm_fence_context_create,
-                      DRM_CONTROL_ALLOW|DRM_RENDER_ALLOW|DRM_UNLOCKED),
+                      DRM_RENDER_ALLOW|DRM_UNLOCKED),
     DRM_IOCTL_DEF_DRV(NVIDIA_GEM_FENCE_ATTACH,
                       nvidia_drm_gem_fence_attach,
-                      DRM_CONTROL_ALLOW|DRM_RENDER_ALLOW|DRM_UNLOCKED),
+                      DRM_RENDER_ALLOW|DRM_UNLOCKED),
 #endif
 
     DRM_IOCTL_DEF_DRV(NVIDIA_GET_CLIENT_CAPABILITY,
@@ -707,7 +707,7 @@ static const struct drm_ioctl_desc nv_drm_ioctls[] = {
 #if defined(NV_DRM_ATOMIC_MODESET_AVAILABLE)
     DRM_IOCTL_DEF_DRV(NVIDIA_GET_CRTC_CRC32,
                       nvidia_drm_get_crtc_crc32,
-                      DRM_CONTROL_ALLOW|DRM_RENDER_ALLOW|DRM_UNLOCKED),
+                      DRM_RENDER_ALLOW|DRM_UNLOCKED),
 #endif /* NV_DRM_ATOMIC_MODESET_AVAILABLE */
 };
 
diff --git a/kernel/nvidia-drm/nvidia-drm-linux.c b/kernel/nvidia-drm/nvidia-drm-linux.c
index c5465a9..ecce218 100644
--- a/kernel/nvidia-drm/nvidia-drm-linux.c
+++ b/kernel/nvidia-drm/nvidia-drm-linux.c
@@ -185,7 +185,7 @@ module_init(nv_linux_drm_init);
 module_exit(nv_linux_drm_exit);
 
 #if defined(MODULE_LICENSE)
-  MODULE_LICENSE("MIT");
+  MODULE_LICENSE("GPL");
 #endif
 #if defined(MODULE_INFO)
   MODULE_INFO(supported, "external");
diff --git a/kernel/nvidia-drm/nvidia-drm-modeset.c b/kernel/nvidia-drm/nvidia-drm-modeset.c
index 116b14a..6fdb03b 100644
--- a/kernel/nvidia-drm/nvidia-drm-modeset.c
+++ b/kernel/nvidia-drm/nvidia-drm-modeset.c
@@ -252,7 +252,7 @@ static int drm_atomic_state_to_nvkms_requested_config(
 
     /* Loops over all crtcs and fill head configuration for changes */
 
-    for_each_crtc_in_state(state, crtc, crtc_state, i)
+    for_each_new_crtc_in_state(state, crtc, crtc_state, i)
     {
         struct nvidia_drm_crtc *nv_crtc;
         struct NvKmsKapiHeadRequestedConfig *head_requested_config;
@@ -303,7 +303,7 @@ static int drm_atomic_state_to_nvkms_requested_config(
 
             head_requested_config->flags.displaysChanged = NV_TRUE;
 
-            for_each_connector_in_state(state, connector, connector_state, j) {
+            for_each_new_connector_in_state(state, connector, connector_state, j) {
                 if (connector_state->crtc != crtc) {
                     continue;
                 }
@@ -324,7 +324,7 @@ static int drm_atomic_state_to_nvkms_requested_config(
 
     /* Loops over all planes and fill plane configuration for changes */
 
-    for_each_plane_in_state(state, plane, plane_state, i)
+    for_each_new_plane_in_state(state, plane, plane_state, i)
     {
         struct NvKmsKapiHeadRequestedConfig *head_requested_config;
 
@@ -634,7 +634,7 @@ void nvidia_drm_atomic_helper_commit_tail(struct drm_atomic_state *state)
          nvidia_drm_write_combine_flush();
     }
 
-    for_each_crtc_in_state(state, crtc, crtc_state, i) {
+    for_each_new_crtc_in_state(state, crtc, crtc_state, i) {
         struct nvidia_drm_crtc *nv_crtc = DRM_CRTC_TO_NV_CRTC(crtc);
         struct nv_drm_crtc_state *nv_crtc_state = to_nv_crtc_state(crtc->state);
         struct nv_drm_flip *nv_flip = nv_crtc_state->nv_flip;
diff --git a/kernel/nvidia-modeset/nvidia-modeset-linux.c b/kernel/nvidia-modeset/nvidia-modeset-linux.c
index edeb152..df1d0bb 100644
--- a/kernel/nvidia-modeset/nvidia-modeset-linux.c
+++ b/kernel/nvidia-modeset/nvidia-modeset-linux.c
@@ -566,9 +566,9 @@ static void nvkms_queue_work(nv_kthread_q_t *q, nv_kthread_q_item_t *q_item)
     WARN_ON(!ret);
 }
 
-static void nvkms_timer_callback(unsigned long arg)
+static void nvkms_timer_callback(struct timer_list *t)
 {
-    struct nvkms_timer_t *timer = (struct nvkms_timer_t *) arg;
+    struct nvkms_timer_t *timer = from_timer(timer, t, kernel_timer);
 
     /* In softirq context, so schedule nvkms_kthread_q_callback(). */
     nvkms_queue_work(&nvkms_kthread_q, &timer->nv_kthread_q_item);
@@ -606,10 +606,8 @@ nvkms_init_timer(struct nvkms_timer_t *timer, nvkms_timer_proc_t *proc,
         timer->kernel_timer_created = NV_FALSE;
         nvkms_queue_work(&nvkms_kthread_q, &timer->nv_kthread_q_item);
     } else {
-        init_timer(&timer->kernel_timer);
+        timer_setup(&timer->kernel_timer, nvkms_timer_callback, 0);
         timer->kernel_timer_created = NV_TRUE;
-        timer->kernel_timer.function = nvkms_timer_callback;
-        timer->kernel_timer.data = (unsigned long) timer;
         mod_timer(&timer->kernel_timer, jiffies + NVKMS_USECS_TO_JIFFIES(usec));
     }
     spin_unlock_irqrestore(&nvkms_timers.lock, flags);
diff --git a/kernel/nvidia/nv.c b/kernel/nvidia/nv.c
index ad5091b..e0d97d4 100644
--- a/kernel/nvidia/nv.c
+++ b/kernel/nvidia/nv.c
@@ -320,7 +320,7 @@ static irqreturn_t   nvidia_isr             (int, void *, struct pt_regs *);
 #else
 static irqreturn_t   nvidia_isr             (int, void *);
 #endif
-static void          nvidia_rc_timer        (unsigned long);
+static void          nvidia_rc_timer        (struct timer_list *t);
 
 static int           nvidia_ctl_open        (struct inode *, struct file *);
 static int           nvidia_ctl_close       (struct inode *, struct file *);
@@ -2472,10 +2472,10 @@ nvidia_isr_bh_unlocked(
 
 static void
 nvidia_rc_timer(
-    unsigned long data
+    struct timer_list *t 
 )
 {
-    nv_linux_state_t *nvl = (nv_linux_state_t *) data;
+    nv_linux_state_t *nvl = from_timer(nvl, t, rc_timer);
     nv_state_t *nv = NV_STATE_PTR(nvl);
     nvidia_stack_t *sp = nvl->sp[NV_DEV_STACK_TIMER];
 
@@ -3386,9 +3386,7 @@ int NV_API_CALL nv_start_rc_timer(
         return -1;
 
     nv_printf(NV_DBG_INFO, "NVRM: initializing rc timer\n");
-    init_timer(&nvl->rc_timer);
-    nvl->rc_timer.function = nvidia_rc_timer;
-    nvl->rc_timer.data = (unsigned long) nvl;
+    timer_setup(&nvl->rc_timer, nvidia_rc_timer, 0);
     nv->rc_timer_enabled = 1;
     mod_timer(&nvl->rc_timer, jiffies + HZ); /* set our timeout for 1 second */
     nv_printf(NV_DBG_INFO, "NVRM: rc timer initialized\n");
